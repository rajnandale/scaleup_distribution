async function allocateQuantityToVendors(vendors, ratios, batchSize, quantity, vendorData, part_no, dia, shift) {
    console.log("allocation Funtion Called");
    const vendorRatios = ratios.map((ratio, index) => ({ ratio, index })).sort((a, b) => a.ratio - b.ratio);
    const allocatedQuantities = new Array(vendors.length).fill(0);
    let remainingQuantity = quantity;
    let currentVendorIndex = 0;
    
    while (remainingQuantity > 0 && currentVendorIndex < vendors.length) {
        const currentVendor = vendors[vendorRatios[currentVendorIndex].index];
        const { fwip, capacity } = vendorData[currentVendor];
        const maxQuantityToAllocate = Math.min(remainingQuantity, batchSize, capacity - fwip);
        
        if (maxQuantityToAllocate <= 0) {
            // No more quantity can be allocated to this vendor, move to the next one
            currentVendorIndex++;
            continue;
        }
        
        allocatedQuantities[vendorRatios[currentVendorIndex].index] += maxQuantityToAllocate;
        vendorData[currentVendor].fwip += maxQuantityToAllocate;
        remainingQuantity -= maxQuantityToAllocate;
        
        if (vendorData[currentVendor].fwip === capacity) {
            currentVendorIndex++;
        }
        
        if (remainingQuantity < batchSize) {
            allocatedQuantities[vendorRatios[currentVendorIndex].index] += remainingQuantity;
            break;
        }
    }
    
    const newFwip = vendors.map((vendor, index) => ({ [vendor]: vendorData[vendor].fwip + allocatedQuantities[index] }));
    const newRatio = vendors.map((vendor, index) => ({ [vendor]: newFwip[index][vendor] / vendorData[vendor].capacity }));
    const insertData = vendors.map((vendor, i) => ([vendor, part_no, allocatedQuantities[i], shift]));
    const updateData = vendors.map((vendor, i) => ([newFwip[i][vendor], newRatio[i][vendor], vendor, dia]));
    const updateQuery = "UPDATE wip_capacity_ratio SET f_wip = ?, ratio = ? WHERE vendor_name = ? AND dia_range = ?";
    const insertQuery = "INSERT INTO vendor_loading (vendor_name, part_no, quantity, shift) VALUES ?";
    
    // Check if quantity is greater than zero before inserting data
    const vendorsWithQuantity = insertData.filter(([, , quantity]) => quantity > 0);
    
    if (vendorsWithQuantity.length > 0) {
        await query(insertQuery, [vendorsWithQuantity]);
        console.log([vendorsWithQuantity]);
        console.log("In line 300 Funtion Loading");
    } else {
        console.log(".");
    }

    for (const updateParams of updateData) {
        await query(updateQuery, updateParams);
    }
}

async function distributeRings() {
    await query("TRUNCATE TABLE wip_capacity_ratio");
    await query("TRUNCATE TABLE vendor_loading");
    await query("TRUNCATE TABLE remaining_rf");
    // const rfData = await query("SELECT * FROM rf");
    const rfData = await query(`SELECT rf.* FROM rf WHERE rf.part_no IN (SELECT part_no FROM parts_master WHERE dia_range IN (1, 2, 3, 4))`);
    const processedPartNos = new Set();

    for (const rfRecord of rfData) {
        const { part_no, quantity, shift } = rfRecord;
        const availableVendors = await query("SELECT vrp.* FROM vrp JOIN limits_master ON vrp.vendor_name = limits_master.vendor AND vrp.dia = limits_master.dia_range WHERE vrp.total != 0 AND vrp.part_no = ?", [part_no]);

        if (availableVendors.length === 0) {
            const diaRange = await query("SELECT dia_range FROM parts_master WHERE part_no = ?", [part_no]);
            // console.log(part_no);
            if (diaRange.length != 0) {
                const dia = diaRange[0].dia_range;
                const inputArray = (await query("SELECT vendors FROM parts_master WHERE part_no = ?", [part_no]))[0].vendors.toUpperCase().split(',').map(value => value.trim()).filter(value => value !== '');
                if (inputArray.length === 1) {
                    //only one vendor found  in part master
                    await query("INSERT INTO vendor_loading (vendor_name, part_no, quantity, shift) VALUES (?,?,?,?)", [inputArray[0], part_no, quantity, shift]);
                    console.log([inputArray[0], part_no, quantity, shift]);
                    processedPartNos.add(part_no);
                    console.log("IN Line 330 Direct Loading");
                } else {
                    for (const vendor of inputArray) {
                        const wipCapacityRatio = await query("SELECT * FROM wip_capacity_ratio WHERE vendor_name = ? AND dia_range = ?", [vendor, dia]);
                        // console.log("in line 591",wipCapacityRatio);
                        if (wipCapacityRatio.length === 0) {
                            // console.log([vendor, dia]);
                            const limitsData = (await query("SELECT vendor, wip_limit FROM limits_master WHERE vendor = ? AND dia_range = ? group by vendor , wip_limit", [vendor, dia]))[0];
                            // console.log(limitsData, "this is limit data");
                            const { vendor: vendorName, wip_limit: range_wip_limit } = limitsData;
                            const noPlanData = (await query("SELECT vendor_name, SUM(no_plan) AS no_plan FROM vrp WHERE vendor_name = ? AND dia = ? GROUP BY dia", [vendorName, dia]))[0];
                            if (noPlanData) {
                                const rkData = (await query("SELECT vendor_name, SUM(quantity) AS quantity FROM rings_katta WHERE vendor_name = ? AND dia_range = ?", [vendorName, dia]))[0];
                                const quantity1 = rkData.quantity === null ? 0 : parseInt(rkData.quantity);
                                const noplan1 = noPlanData.no_plan === null ? 0 : parseInt(noPlanData.no_plan);
                                const fwip = noplan1 + quantity1;
                                const ratio = fwip / range_wip_limit;
                                // console.log(fwip, ratio);
                                const capacity = range_wip_limit;
                                await query("INSERT INTO wip_capacity_ratio (vendor_name, dia_range, ratio, f_wip, capacity) VALUES (?,?,?,?,?)", [vendorName, dia, ratio, fwip, capacity]);
                                // console.log("inserted");
                            } else {
                                // console.log("inside line 601");
                                const noPlanData = 0;
                                const rkData = (await query("SELECT vendor_name, SUM(quantity) AS quantity FROM rings_katta WHERE vendor_name = ? AND dia_range = ?", [vendorName, dia]))[0];
                                const quantity1 = rkData.quantity === null ? 0 : parseInt(rkData.quantity);
                                const fwip = parseInt(noPlanData) + quantity1;
                                const ratio = fwip / range_wip_limit;
                                // console.log(quantity1);
                                const capacity = range_wip_limit;
                                await query("INSERT INTO wip_capacity_ratio (vendor_name, dia_range, ratio, f_wip, capacity) VALUES (?,?,?,?,?)", [vendorName, dia, ratio, fwip, capacity]);
                                // console.log("inserted 2");
                            }
                        }
                    }
                }
            } else {}

        } else if (availableVendors.length === 1) {
            //only one vendor found in vrp
            const diaRange = await query("SELECT dia_range FROM parts_master WHERE part_no = ?", [part_no]);
            const { vendor_name: vendor } = availableVendors[0];
            await query("INSERT INTO vendor_loading (vendor_name, part_no, quantity, shift) VALUES (?,?,?,?)", [vendor, part_no, quantity, shift]);
            processedPartNos.add(part_no);
            console.log("in line 398 Direct Loading");
        } else {
            const diaRange = (await query("SELECT dia_range FROM parts_master WHERE part_no = ?", [part_no]))[0].dia_range;
            for (const availableVendor of availableVendors) {
                const { vendor_name: vendor } = availableVendor;
                const wipCapacityRatio = await query("SELECT * FROM wip_capacity_ratio WHERE vendor_name = ? AND dia_range = ?", [vendor, diaRange]);
                if (wipCapacityRatio.length === 0) {
                    // console.log(vendor, diaRange, part_no);
                    const limitsData = (await query("SELECT vendor, wip_limit FROM limits_master WHERE vendor = ? AND dia_range = ? GROUP BY vendor, wip_limit", [vendor, diaRange]))[0];
                    const { vendor: vendorName, wip_limit: range_wip_limit } = limitsData;
                    const noPlanData = (await query("SELECT vendor_name, SUM(no_plan) AS no_plan FROM vrp WHERE vendor_name = ? AND dia = ? GROUP BY dia", [vendorName, diaRange]))[0];
                    const rkData = (await query("SELECT vendor_name, SUM(quantity) AS quantity FROM rings_katta WHERE vendor_name = ? AND dia_range = ?", [vendorName, diaRange]))[0];
                    const quantity1 = rkData.quantity === null ? 0 : parseInt(rkData.quantity);
                    const noplan1 = noPlanData.no_plan === null ? 0 : parseInt(noPlanData.no_plan);
                    const fwip = noplan1 + quantity1;
                    const ratio = fwip / range_wip_limit;
                    const capacity = range_wip_limit;
                    await query("INSERT INTO wip_capacity_ratio (vendor_name, dia_range, ratio, f_wip, capacity) VALUES (?,?,?,?,?)", [vendorName, diaRange, ratio, fwip, capacity]);
                }
            }
        }

        if (processedPartNos.has(part_no)) {
            continue; // Skip further processing
        }
        const partsData = await query("SELECT * FROM parts_master WHERE part_no = ?", [part_no]);
        if (partsData.length > 0) {
            const { batch } = partsData[0];
            const diaRange = (await query("SELECT dia_range FROM parts_master WHERE part_no = ?", [part_no]))[0].dia_range;
            const vendorsAvailable = (await query("SELECT vendor_name FROM wip_capacity_ratio")).map(row => row.vendor_name);
            const vendorsRatio = (await query("SELECT ratio FROM wip_capacity_ratio")).map(row => row.ratio);
            const vendorData = {};
            const vCapacity = (await query("SELECT capacity FROM wip_capacity_ratio")).map(row => row.capacity);
            const fwip = (await query("SELECT f_wip FROM wip_capacity_ratio")).map(row => row.f_wip);
            const vacancy = vCapacity.map((capacity, index) => capacity - fwip[index]);
            vendorsAvailable.forEach((vendorName, index) => {
                const fwipValue = fwip[index];
                const capacityValue = vCapacity[index];
                vendorData[vendorName] = { fwip: fwipValue, capacity: capacityValue };
            });
            console.log(vendorsAvailable);
            // console.log(vendorData);
            console.log(quantity);
            allocateQuantityToVendors(vendorsAvailable, vendorsRatio, batch, quantity, vendorData, part_no, diaRange, shift);
        }
    }
}
